public class Annotation {
  /*
  객체의 4가지 특징
    1.캡슐화(정보은닉)
    1.상속
    -공통기능을 묶어서 관리
    1.추상화
    -각 기능과 속성만을 따와 묶어 관리하는것(추상클래스, 인터페이스)
    1.다형성
    -같은 이름이지만 다른 기능 가능(오버라이딩, 오버로딩)

  추상메소드(abstract:앱스트랩스)
  추상메소드는 내부 기능을 구현하지 않고, 이름과 속성을 선언만 한 메소드이다.
  이후 상속받거나, 심어진곳에서 내부 기능 구현을 해주어야만 한다.(강제)

  추상클래스와 인터페이스
  인터페이스란 변수를 수정하거나 생성하지 않고,(상수고정)
  임플리먼츠 된 파일에서 인터페이스 내부에 작성된 모든 클래스를 작성해야만 한다.
  여러개 삽입 가능.

추상클래스는 변수를 수정하거나 생성할수 있고,
익스텐드(상속) 된 파일에서 추상 클래스 내부에 작성된 추상메소드들만 구현한다.

파라미터와 아규먼츠
파라미터는 매개변수의 터. 아규먼츠는 매개변수의 값.

메소드란?
기능.

클래스란?
기능의 묶음. 또는 기능을 구현할 설계도.

객체란?
-클래스의 설계도로 만들어진 데이터
-값을 넣어주면, 클래스라는 설계도 대로 움직이는 대상. 이라고 할수 있을듯

인스턴스란?
-특정 클래스에서 생성 된 객체.
-모든 인스턴스는 객체지만, 모든 객체가 인스턴스는 아님.
-

this. 이란?
인스턴스를 찾는것.
1. 정확히는 디스가 클래스 명으로 선언되어 있고,
2. 찾으려는 변수명이 디스가 선언된 클래스 안에 있다면,
선언된곳의 클래스 내부에서 같은 이름의 변수를 찾아 받은 값을 할당하는것.
초기화.. 보다는 할당에 가깝다.

인스턴스오프
-상속관계에서 객체가 클래스의 인스턴스에 포함되는지 확인하는 명령어
-선언방법 : 객체명 인스턴스오프 클래스명
-어디까지나 포함을 이야기 하기에,

컨테이너 제네릭 타입?
<T> 를 사용.
자료구조타입(기본 팔형)이 아닌 사용하는(컴파일)시점에서 정하는 방식.
하나의 클래스로 여러타입 지정가능(형변환 : 캐스팅)
선언법 : 사용할컨테이너명<사용할자료구조> 컨테이너객체명 = 뉴 연결할컨테이너값<>();
문자
Container<String> stringContainer = new Container<>();
stringContainer.set("Hello");
System.out.println(stringContainer.get()); // 출력: Hello

정수
Container<Integer> intContainer = new Container<>();
intContainer.set(100);
System.out.println(intContainer.get()); // 출력: 100

막상연결한 컨테이너엔 문자나 정수의 형태가 지정되어 있지 않고 변수타입이 T(제네릭)타입인 변수하나만 선언되어있다.
이후는 디스. 를 통한 셋 메소드에서의 값 할당과, T 타입을 리턴하는 겟 메소드 뿐.
재사용성 증가, 타입 안정성 보장. 형변환 자동.

제네틱 타입과 컨테이너 제네릭의 차이
-제네릭은 클래스 메소드 인터페이스 등에서 활용 가능.
-컨테이너 제네릭은 컬렉션 같은 자료구조에서 유연하게 사용.(뭐든 담는 형태)

다운캐스팅
선업법 : String str = (String) obj;
사용할자식타입 객체명 = 다운캐스팅할형태 원래형태.

웨퍼클래스?
스테틱을 사용하는 방법과 이유

정적과 동적이란?

인터페이스에서 사용가능한 4가지 메소드와 각 기능

람다식
-엄밀히 말하자면 람다식은 익명 클래스의 익명 메소드이다.
-메소드의 이름과 리턴 키워드 생략가능. 타입스크립트 선언과 비슷하다.

익명클래스
-즉석에서 클래스를 선언하고 사용하는 방식
-한번만 사용할 객체나 인터페이스에서 보통 사용.
선언법 :
MyFunction sum = new MyFunction() {
    @Override
    public int add(int a, int b) {
        return a + b;
    }
};
System.out.println(sum.add(10, 20)); // 30

함수형 인터페이스
선언법 : @FunctionalInterface
-단 하나의 추상 메소드만을 가지는 인터페이스를 함수형 인터페이스라 함.
-람다식의 기반

컬렉션 프레임 워크
어레이 리스트
링크드 리스트
서로 상속의 관계
해쉬맵


  */
  public static void main(String[] args) {
    번호();
//    int a = 5;
//    int b = 0;
//    for (; a + b <= 5; ) {//두 합이 5보다 크면 멈춤. 작으면 계속 돌아감.
//      a = (int) (Math.random() * 6);
//      b = (int) (Math.random() * 6);
//      System.out.println(a + "," + b);
//    }
  }

  public static void 번호() {
    int a = 5;
    int b = 0;
    int c = 0;
    for (; ; ) {//두 합이 5보다 크면 멈춤. 작으면 계속 돌아감.
      a = (int) (Math.random() * 100);
      b = (int) (Math.random() * 100);
      c = (int) (Math.random() * 100000 - 10000);
      if (a < 10 && b < 10) {
        System.out.println("회원번호" + "00" + a + "-" + "00" + b + "-" + c);
      } else if (a < 10 && b < 100) {
        System.out.println("회원번호" + "00" + a + "-" + "0" + b + "-" + c);
      } else if (a < 100 && b < 10) {
        System.out.println("회원번호" + "0" + a + "-" + "00" + b + "-" + c);
      } else {
        System.out.println("회원번호" + "0" + a + "-" + "0" + b + "-" + c);
      }
//      System.out.println("회원번호" + String.format("%03d", a) + "-" + "0" + b + "-" + String.format("%07d", c));
    }
  }
}